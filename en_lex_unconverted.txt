defaults
  determiner: S
    person: 3
    number: SG
    is-rel: false
    hasspec: false
  determiner: P
    person: 3
    number: PL
    is-rel: false
    hasspec: false
  determiner: SR
    person: 3
    number: SG
    is-rel: true
    hasspec: false
  determiner: PR
    person: 3
    number: PL
    is-rel: true
    hasspec: false


could (mood)
  conj: inf
couldn't (mood)
  conj: inf
can (mood)
  conj: inf
  rule (-1)
    form: [I tense=past $aspect @]
    result: [I tense=past $aspect mood=could]
can't (mood)
  conj: inf
  rule (-1)
    form: [I tense=past $aspect @]
    result: [I tense=past $aspect mood=couldn't]
may (mood)
  conj: inf
  output (tense=nonpst; person=3; number=SG): may
don't (aux)
  conj: inf
have (aspect)
  conj: pstprt
have (perfect)
  conj: pstprt
have (verb)
  objects: 1
  object1: NP
be (aspect)
  altpos: verb
  objects: 1
  object1: NP/AP
  conj: prsprt
have+been (aspect)
  conj: pstprt
be (continuous)
  conj: prsprt
haven't (aspect)
  altpos: verb
  conj: pstprt
aren't (aspect)
  altpos: verb
  objects: 1
  object1: NP/AP
  conj: prsprt
haven't+been (aspect)
  conj: pstprt
not (mood)
  conj: inf
do (aux)
  conj: inf
not (negative)
  rule (-1)
    form: <I $tense:tense negative=not $invis+?(audible=false)>
    result: <I $tense aux=do negative=not $invis+>
must (mood)
  conj: inf
will (mood)
  output (tense=nonpst; person=3; number=SG): will
  conj: inf
does (aux)
  conj: inf
did (aux)
  conj: inf
imperative (mood)
  conj: inf
  audible: false
imperative-not (mood)
  conj: inf
  display: do not
to (mood)
  conj: inf
  display: to
be (mood)
  conj: pstprt
  searchkey: passive


any (quantifier)
  number: SG
some (quantifier)
  number: PL
some#PL (determiner): P
not (quantifier)
many (quantifier)
  number: PL
all (quantifier)

a (determiner): S
  rule (10)
    form: |[?DP determiner=a |[?NP $noun(proper=true)]]
    result: |[$DP ~ |[$NP $noun]]
  linear-text: an
    1: /^[aeiou]/
the (determiner): S
a#PL (determiner): P
  linear-text: an
    1: /^[aeiou]/
the#PL (determiner): P
's (determiner): S
  hasspec: true
's#PL (determiner): P
  hasspec: true
her (determiner): S
her#PL (determiner): P
his (determiner): S
his#PL (determiner): P
that (determiner): S
those (determiner): P
your (determiner): S
your#PL (determiner): P

many (determiner): P
SG (determiner): S
  audible: false
PL (determiner): P
  audible: false
our (determiner): S
this (determiner): S
vocative (determiner): S
  inaudible
  
and (conjunction)
but (conjunction)
for (conjunction)
then (conjunction)
both (pre-conj)
  display: both
both-and (conjunction)
  rule (7)
    form: |[conjP $a ~ conjunction=both-and $b]
    result: |[conjP pre-conj=both $a conjunction=and $b]
if (pre-conj)
  display: if
if-then (conjunction)
  rule (7)
    form: |[conjP $a ~ conjunction=if-then $b]
    result: |[conjP pre-conj=if $a conjunction=then $b]
though (pre-conj)
  display: though
though-null (conjunction)
  rule (7)
    form: |[conjP $a conjunction=though-null $b]
    result: |[conjP pre-conj=though $a ~ $b]

vocative (preposition)
  inaudible
  audible: false
so (conjunction)

imp (complementizer)
because (conjunction)



paren (conjunction)
  inaudible
  audible: false
  rule (7)
    form: |[conjP $s? $m? conjunction=paren $c]
    result: |[conjP $s $m ~ [par punct=lpar $c punct=rpar]]

so+that (conjunction)
then+null (conjunction)
thus (conjunction)
should (mood)
  conj: inf
subjunctive (mood)
  conj: prsprt
  display: were

if (pre-conj)

exclaim (complementizer)
  audible: false
  rule (20)
    form: |[?CP complementizer=exclaim]
    result: [ex |[$CP ~] punct=excl]
    
