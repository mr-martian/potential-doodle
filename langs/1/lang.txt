metadata
  name
    local: English
  creator: Natlang
syntax
  start-with: CP
  node-types
    AP
      xbar: ~; ~; adjective; ~
      require: adjective
    CP
      xbar: ~; ~; complementizer; IP
    IP
      xbar: ~; ~; I; VP
    NP
      xbar: ~; AP?; noun; CP?
      require: noun
    PP
      xbar: ~; ~; preposition; DP
      require: preposition
    I
      structure: [I $t:tense $a:aspect? $m:mood?]
    DP
      variable: $head:determiner?
      option ($head(hasspec=true))
        xbar: DP; ~; $head; NP
        require: determiner
      option ($head(hasspec=false))
        xbar: ~; ~; $head; NP
        require: determiner
      option ($head!)
        xbar: ~; ~; $pro:pronoun; ~
        require: pronoun
    VP
      variable: $head:verb
      option ($head(objects=1); $head(object1=NP))
        xbar: DP; adverb?; $head; DP
        require: verb
      option ($head(objects=1); $head(object1=PP))
        xbar: DP; adverb?; $head; PP
        require: verb
      option ($head(objects=1); $head(object1=AP))
        xbar: DP; adverb?; $head; AP
        require: verb
      option ($head(objects=1); $head(object1=NP/AP))
        xbar: DP; adverb?; $head; DP
        require: verb
      option ($head(objects=1); $head(object1=NP/AP))
        xbar: DP; adverb?; $head; AP
        require: verb
      option ($head(objects=0))
        xbar: DP; adverb?; $head; ~
        require: verb
      option ($head(objects=1); $head(object1=CP))
        xbar: DP; adverb?; $head; CP
        require: verb
      option
        structure: |[VP $head]
        #default to intransitive if unspecified
lexc: hfst
  capitalize-first-letter
  split-root: _
  noun
    format: {root[0]}<n>{plural}{case}
    tags
      plural: number
        default: <SG>
      case: case
        default: <nom>
    in: NounRoot
    to: NounInfl
  verb
    format: {root[0]}<v>{tense}{person}{number}
    tags
      tense: tense
        default: <nonpst>
      person: person
        default: <3>
      number: number
        default: <SG>
    in: VerbRoot
    to: VerbInfl
  mood
    format: {root[0]}<aux>{tense}{person}{number}
    tags
      tense: tense
        default: <error>
      person: person
        default: <3>
      number: number
        default: <SG>
    in: AuxRoot
    to: AuxInfl
  aux
    format: {root[0]}<aux>{tense}{person}{number}
    tags
      tense: tense
        default: <error>
      person: person
        default: <3>
      number: number
        default: <SG>
    in: AuxRoot
    to: AuxInfl
  aspect
    format: {root[0]}<aux>{tense}{person}{number}
    tags
      tense: tense
        default: <error>
      person: person
        default: <3>
      number: number
        default: <SG>
    in: AuxRoot
    to: AuxInfl
  adjective
    bland: <adj>
  determiner
    bland: <det>
  pronoun
    bland: <prn>
  preposition
    bland: <prep>
  conjunction
    bland: <conj>
  adverb
    bland: <adv>
  quantifier
    bland: <quant>
  complementizer
    bland: <comp>
  rel-pronoun
    bland: <prn>
transform
  rule (0): do insertion
    context: |[*CP complementizer=+Q |[*IP @]]
    form: <I $tense?>
    result: [I $tense aux=do]
  multirule (1): gather person/number
    layer?: |[DP $spec? $mod? $notrel |[NP $nspec? $nmod? $noun @]]
      result: |[DP $spec? $mod? $notrel |[NP $nspec? $nmod? $noun @]]
    layer?
      form: |[conjP |[CP $CPspec? $CPmod? $comp? @] $conj? $ccomp?]
        result: |[conjP |[CP $CPspec $CPmod $comp @] $conj $ccomp]
      form: |[CP $CPspec? $CPmod? $comp? @]
        result: |[CP $CPspec $CPmod $comp @]
    layer: |[IP <I $tense:tense $other+?> @]
      result: |[IP <I $tense:tense $other+> @]
      cond
        option ($notrel)
          setprop ($tense.person): $notrel.person
          setprop ($tense.number): $notrel.number
        option
          setprop ($tense.person): $subj.person
          setprop ($tense.number): $subj.number
    layer
      form: |[vP @ $m? $h? $c?]
        result: |[vP @ $m $h $c]
      form: |[VP @ $m? $h? $c?]
        result: |[VP @ $m $h $c]
    layer?: |[conjP @ $conj2? $ccomp2?]
      result: |[conjP @ $conj2? $ccomp2?]
    layer: |[?DP $subj]
      result: |[$DP $subj]
  multirule (2): agreement and subject position
    layer
      form: |[IP <I $tense:tense $perfect:perfect? $continuous:continuous? $neg:negative? $mood?> @]
        result: |[IP $subj <I $tense $mood? $perfect? $continuous? $neg?> @]
        distribute (conj; tense): $tense; $mood; $perfect; $continuous; $verb
        distribute (person; person): $tense; $mood; $perfect; $continuous; $verb
        distribute (number; number): $tense; $mood; $perfect; $continuous; $verb
    layer
      form: |[?vP $subj? ~ |[?VP $verb]]
        result: |[$vP ~ $verb |[$VP ~]]
      form: |[?VP $subj? $verb $c?]
        result: |[$VP ~ $verb $c]
  rule (3): negative position
    form: <I $tense:tense? $neg:negative $first? $rest+?>
    result: <I $tense $first $neg $rest+>
  rule (4): aux-inversion
    form: |[CP ~ $mod? complementizer=+Q |[?IP <I $tense:tense? $neg:negative? $first $other+?>]]
    result: |[CP [aux $first $neg] $mod complementizer=+Q |[$IP <I $tense $other+>]]
  multirule (5): relative pronoun position
    layer: |[NP $NPspec? $NPmod? $NPhead? @]
      result: |[NP $NPspec $NPmod $NPhead @]
    layer?: |[conjP @ $conj? $conjcomp?]
      result: |[conjP @ $conj $conjcomp]
    layer: |[CP ~ $CPmod? ~ @]
      result: |[CP ~ $CPmod |[$DP $rel] @]
    layer
      form: |[IP |[?DP $rel:rel-pronoun] $m? $h? $c?]
        result: |[IP ~ $m $h $c]
      form: |[IP |[?DP $rel:null-pro] $m? $h? $c?]
        result: |[IP ~ $m $h $c]
      form: |[IP $is? $im? $ih? |[VP $vs? $vm? $vh? |[?DP $rel:rel-pronoun]]]
        result: |[IP $is $im $ih |[VP $vs $vm $vh ~]]
      form: |[IP $is? $im? $ih? |[VP $vs? $vm? $vh? |[?DP $rel:null-pro]]]
        result: |[IP $is $im $ih |[VP $vs $vm $vh ~]]
      form: |[IP $is? $im? $ih? |[VP $vs? $vm? $vh? |[?PP $p? |[?DP $rel:rel-pronoun]]]]
        result: |[IP $is $im $ih |[VP $vs $vm $vh |[$PP $p ~]]]
      form: |[IP $is? $im? $ih? |[VP $vs? $vm? $vh? |[?PP $p? |[?DP $rel:null-pro]]]]
        result: |[IP $is $im $ih |[VP $vs $vm $vh |[$PP $p ~]]]
  multirule (6): relative clause with no relative pronoun
    layer: |[?NP $noun? @]
      result: |[$NP $noun @]
    layer?: |[conjP @ $conj? $other?]
    layer: |[CP ~ $m? $h?(% complementizer=that) $c?]
      result: |[CP punct=colon $m $h $c]
  multirule (6): periods
    layer: [SEN @]
      result: [SEN @]
    layer?: |[?conjP $conj? @]
      result: |[$conjP $conj @]
    layer?: |[conjP $a? $b? $conj2? @]
      result: |[conjP $a $b $conj2 @]
    layer
      form: |[?CP ~]
        result: [punct |[$CP ~] punct=period]
      form: |[?DP]
        result: [punct |[$DP] punct=period]
  rule (6): periods for sentence fragments
    form: [SEN $x:PP]
    result: [SEN $x punct=period]
  rule (8): oxford comma
    form: |[conjP $a? $b? $c1? |[conjP $d? $e? $c2? $f?]]
    cond
      option ($a)
        result: |[conjP $a $b [cm punct=comma $c1] |[conjP $d $e [cm punct=comma $c2] $f]]
      option
        result: |[conjP $a $b $c1 |[conjP $d $e [cm punct=comma $c2] $f]]
  rule (8): pronoun appositive
    form: |[?DP $det $PP:PP]
    result: |[$DP $det [cm punct=comma $PP punct=comma]]
  rule (8): noun appositive
    form: |[?NP $det $PP:DP]
    result: |[$NP $det [cm punct=comma $PP punct=comma]]
  rule (0): plural marking
    form: |[?DP $head |[?NP $noun]]
    setprop ($noun.number): $head.number
  rule (1): attach genitive suffix
    form: |[DP $spec:DP $mod? $head $comp?]
    result: |[DP [GEN $spec $head] $mod ~ $comp]
  rule (2): switch to case marking, if applicable
    form: [GEN |[?DP $dh? |[?NP $noun ~]] $gen]
    result: |[?DP $dh |[?NP $noun ~]]
    setval ($noun.case): gen
  rotate: Vmod
  rotate: Nmod
